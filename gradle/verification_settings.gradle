dependencies {
    // P3C
    pmd                 "com.alibaba.p3c:p3c-pmd:$ali_p3c_pmd_version"

    // CheChe365
    testImplementation  "com.cheche365.test:cheche365-test-core:${getProjectVersion(cheche365_version)}"

    // Spock Framework
    testRuntimeOnly     "org.spockframework:spock-spring:$spockframework_version"
    // Spock Reports
    testRuntimeOnly("com.athaydes:spock-reports:$spockreports_version") {
        transitive = false
    }
}


/**
 * Integration Test Task
 */
test {

    def testClasses = System.getProperty 'test.classes'
    if (!testClasses) {
        include '**/*Test*'
        include '**/*FT*'
        include '**/*UT*'
    } else {
        testClasses.tokenize(',').each { testClass ->
            include testClass
        }
    }

    forkEvery = System.getProperty('test.forkEvery', '100') as int // 每跑100个测试类后重启fork进程
    maxParallelForks = System.getProperty('test.maxParallelForks', (Runtime.runtime.availableProcessors() + 2) as String) as int // 最多启动（可用处理器数+2）个进程

    def springProfilesActive = System.getProperty 'spring.profiles.active'
    if (!springProfilesActive) {
        System.setProperty 'spring.profiles.active', spring_profiles_active
    }
    systemProperties = System.properties as Map

    onOutput { descriptor, event ->
        logger.lifecycle event.message
    }
}

jacoco {
    toolVersion = jacoco_version
}

pmd {
    incrementalAnalysis = true
    toolVersion = pmd_version
    ruleSets = [
        'rulesets/java/ali-comment.xml',
        'rulesets/java/ali-concurrent.xml',
        'rulesets/java/ali-constant.xml',
        'rulesets/java/ali-exception.xml',
        'rulesets/java/ali-flowcontrol.xml',
        'rulesets/java/ali-naming.xml',
        'rulesets/java/ali-oop.xml',
        'rulesets/java/ali-orm.xml',
        'rulesets/java/ali-other.xml',
        'rulesets/java/ali-set.xml',
        'rulesets/vm/ali-other.xml'
    ]
}

/**
 * 分支覆盖率达到100%
 */
jacocoTestCoverageVerification {
    violationRules {
        // rule #1：bundle分支覆盖率
        rule {
            enabled = Boolean.valueOf(System.getProperty('jacoco.bundleBranchCoverageRuleEnabled', Boolean.TRUE.toString()))
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = System.getProperty('jacoco.bundleBranchCoveredRatio', '1.0') as BigDecimal
            }
        }
        // rule #2：bundle指令覆盖率
        rule {
            enabled = Boolean.valueOf(System.getProperty('jacoco.bundleInstructionCoverageRuleEnabled', Boolean.TRUE.toString()))
            excludes = System.getProperty('jacoco.bundleInstructionExclusion', 'com/cheche365/**/app').tokenize(',')
            limit {
                minimum = System.getProperty('jacoco.bundleInstructionCoveredRatio', '1.0') as BigDecimal
            }
        }
        // rule #3：package指令覆盖率
        rule {
            enabled = Boolean.valueOf(System.getProperty('jacoco.packageInstructionCoverageRuleEnabled', Boolean.TRUE.toString()))
            element = 'PACKAGE'
            excludes = System.getProperty('jacoco.packageInstructionExclusion', '*.app,*.config').tokenize(',')
            limit {
                minimum = System.getProperty('jacoco.packageInstructionCoveredRatio', '1.0') as BigDecimal
            }
        }
    }
}

/**
 * 覆盖率报告排除main class
 */
jacocoTestReport {
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect { dir ->
            fileTree dir: dir, exclude: System.getProperty('jacoco.reportExclusion', '**/app/**/*.class')
        })
    }
}

/**
 * 一些任务依赖和属性设置
 */
check.dependsOn jacocoTestCoverageVerification
test.finalizedBy jacocoTestReport, jacocoTestCoverageVerification
tasks.withType(Test) {
    // 这是为了解决在项目根目录上执行test时Jacoco找不到依赖的类的问题
    systemProperties.'user.dir' = workingDir
    if (java11) {
        systemProperties.remove 'java.endorsed.dirs'
    }
}
